# -*- coding: utf-8 -*-
"""Twitter.ipynb
Author: Unmesh J.N.
Automatically generated by Colaboratory.
"""

#IMPORT AND INSTALL MODULES
#!pip install tweepy
#!pip install textblob
#!pip install wordcloud
import sys,tweepy,re
import nltk
from textblob import TextBlob
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS 
from nltk.corpus import stopwords
from scipy.misc import imread
import pandas as pd

# TWITTER API KEYS FOR @user
# Consume:
CONSUMER_KEY    = ' '
CONSUMER_SECRET = ' '
# Access:
ACCESS_TOKEN  = ' '
ACCESS_SECRET = ' '


def convert_percentage(part,whole):
  """A function which converts a number into a percentage"""
  return 100 * float(part)/ float(whole)

def get_user_input():
  """A function to get the input from the user"""
  searchTerm = input("Enter Keyword/HashTag to search about: ")
  NoofTweets = int(input("Enter the number of tweets to search: "))
  return searchTerm, NoofTweets

def get_keys(searchTerm, NoofTweets):
  """A function to connect to twitter"""
  auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
  auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)    
  api = tweepy.API(auth, wait_on_rate_limit=True)
  tweets = tweepy.Cursor(api.search, q=searchTerm, lang = "en").items(NoofTweets)
  return tweets
            
def get_polarity_and_wordcloud(tweets,NoofTweets):
  """A function to calculate sentiments and to build wordcloud"""
  positive = 0
  negative = 0
  neutral = 0
  polarity = 0
  print()
  print('THE TWEETS ARE:')
  print()
  for tweet in tweets:
      #print(tweet.text)
      tweet_tokenisation = (' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)|^RT | co | "," ", str(tweet.text)).split())) #returns a list--.join converts it into a string
      print(tweet.created_at)
      print(tweet_tokenisation)
      sentiment_analyser = TextBlob(tweet.text)
      polarity += sentiment_analyser.sentiment.polarity
      if sentiment_analyser.sentiment.polarity == 0:
          neutral += 1
      if sentiment_analyser.sentiment.polarity < 0:
          negative += 1
      if sentiment_analyser.sentiment.polarity > 0:
          positive += 1
  Positive = convert_percentage(positive, NoofTweets)
  Negative = convert_percentage(negative, NoofTweets)
  Neutral = convert_percentage(neutral, NoofTweets)
  print()
  print("WORDCLOUD:")
  print()
  more_stopwords = {'oh', 'will', 'hey', 'yet', 'RT'} # Adding stopwords as a part of text preprocessing 
  STOPWORDS_MOD = STOPWORDS.union(more_stopwords)
  cloud = WordCloud(width =1800, height=1400, background_color = 'black', stopwords=STOPWORDS_MOD).generate(tweet_tokenisation)
  plt.imshow(cloud)
  plt.axis('off')
  plt.tight_layout(pad=0)
  plt.show()      
  return Positive, Negative, Neutral

def print_analysis(Positive, Negative, Neutral, searchTerm, NoofTweets):
  """Prints the sentiment analysis"""
  print("SENTIMENT ANALYSIS:")
  print()
  print("Sentiment analysis on the word " + searchTerm.upper() + " " + "by analysing " + str(NoofTweets) + " tweets:")
  print()
  print("POSITIVE: " + format(Positive, '.2f') + " Percent")
  print("NEGATIVE: " + format(Negative, '.2f') + " Percent")
  print("NEUTRAL:  "  + format(Neutral, '.2f') + " Percent")

def main():
  """Main program"""
  user_input1, user_input2 = get_user_input()
  output3 = get_keys(user_input1, user_input2)
  Positive_1, Negative_1, Neutral_1 = get_polarity_and_wordcloud(output3, user_input2)
  print_analysis(Positive_1, Negative_1, Neutral_1, user_input1, user_input2)
main() #call to main
